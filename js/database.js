const DATABASEDAYS = [
    {
        day: 1,
        level: 'elementary',
        title: 'Вступ в JavaScript',
        lecture: `
            <p loremdasff class="lecture__paragraph">
                JavaScript (JS) є однією з найпоширеніших та потужних мов програмування, що використовується у веброзробці. Він відкриває безмежні можливості для створення динамічних та інтерактивних вебсайтів. JavaScript дозволяє взаємодіяти з користувачами, обробляти події, маніпулювати змістом сторінок та взаємодіяти зі сторонніми сервісами.
                <br><br>
                Одна з найбільших переваг JavaScript полягає в тому, що він виконується безпосередньо у браузері користувача. Це означає, що не потрібно додаткових налаштувань або встановлення програмного забезпечення для виконання JavaScript-коду. Вебсторінки можуть негайно реагувати на взаємодію користувача, змінюючи зміст або відправляючи запити на сервер для отримання даних у реальному часі.
                <br><br>
                JavaScript також використовується для розробки повноцінних вебдодатків та вебсервісів. Завдяки JS, можна створювати складну логіку, обробляти та зберігати дані, виконувати асинхронні запити до сервера та багато іншого. Він є важливим компонентом для розробки фронтенду, дозволяючи створювати взаємодіючі елементи, анімацію та валідацію даних.
                <br><br>
                JavaScript також здатний працювати на стороні сервера завдяки популярному середовищу виконання Node.js. Це дозволяє розробникам використовувати JavaScript для створення вебсерверів, мережевих додатків та інших серверних рішень.
                <br><br>
                Вступ у світ JavaScript відкриває двері до безлічі можливостей у веброзробці. Вивчення цієї мови дає змогу творити інтерактивні, динамічні та потужні вебсайти та додатки. Він є невід'ємною складовою для кожного розробника, який прагне створити захоплюючі та сучасні вебрішення.
            </p>
        `
    },
    {
        day: 2,
        level: 'elementary',
        title: 'Історія розвитку JavaScript',
        lecture: `
            <p loremdasff class="lecture__paragraph">
                JavaScript (JS) є однією з найпопулярніших та впливових мов програмування у сфері веброзробки. Його історія починається у 1995 році, коли Брендан Айк, розробник компанії Netscape, створив мову, яку спочатку називали LiveScript. Однак, з метою використання популярності Java, мову перейменували на JavaScript.
                <br><br>
                У своїх початках JavaScript використовувався для простих скриптів на вебсторінках. Але з часом мова почала розвиватися та ставати більш потужною. У 1997 році стандартом ECMAScript (стандартна специфікація мови JavaScript) було прийнято першу версію, відому як ECMAScript 1.
                <br><br>
                Зараз JavaScript є високорівневою мовою, що використовується для розробки різноманітних вебдодатків та вебсайтів. Завдяки своїй універсальності, JavaScript зайняв свою нішу не тільки на клієнтській стороні, але й на серверномій стороні завдяки платформі Node.js.
                <br><br>
                Розвиток JavaScript супроводжується випуском нових версій стандарту ECMAScript. ECMAScript 6, випущений у 2015 році, вніс багато покращень, включаючи стрілкові функції, розширену підтримку класів, блоки шаблонів та інші функціональність. Пізніше з'явилися версії ECMAScript 7, 8, 9, 10 та 11, кожна з яких додає нові можливості та покращує роботу з мовою.
                <br><br>
                JavaScript також став популярним завдяки розвитку фреймворків та бібліотек, таких як Angular, React та Vue.js, які дозволяють розробникам швидше та ефективніше створювати складні вебдодатки. Ці фреймворки надають зручні інструменти для організації коду, керування станом додатків та створення компонентів.
                <br><br>
                Наприкінці 2010-х років та на початку 2020-х років JavaScript продовжує активно розвиватися. З'являються нові функціональні можливості, покращуються продуктивність та безпека мови, а також розширюються границі її застосування.
                <br><br>
                JavaScript став необхідним інструментом для сучасної веброзробки. Він дозволяє створювати динамічні, інтерактивні та потужні вебдодатки, які забезпечують захоплюючий досвід користувача. З кожним роком JavaScript продовжує змінювати веброзробку, впливаючи на її швидкість, якість та можливості.
            </p>
        `
    },
    {
        day: 3,
        level: 'elementary',
        title: 'Середовище виконання js-коду (редактори коду та інструмент розробника)',
        lecture: `
            <p loremdasff class="lecture__paragraph">
                Середовище виконання js-коду та інструменти розробника відіграють важливу роль у розробці JavaScript-проектів. Вони забезпечують зручну та продуктивну робочу середу для програмістів, допомагаючи їм писати, налагоджувати та тестувати код.
                <br><br>
                Одним з основних інструментів розробника є текстовий редактор або інтегроване середовище розробки (IDE). Вони надають розширений набір функцій, таких як підсвічування синтаксису, автодоповнення, перевірка помилок та багато іншого. Популярні редактори коду для JavaScript включають Visual Studio Code, Sublime Text, Atom та JetBrains WebStorm.
                <br><br>
                Крім редакторів коду, існують інші корисні інструменти, які полегшують розробку JavaScript-проектів. Наприклад, системи керування версіями, такі як Git, дозволяють відстежувати зміни в коді, співпрацювати з іншими розробниками та забезпечувати безпеку проекту.
                <br><br>
                Для налагодження та тестування JavaScript-коду використовуються інструменти, такі як браузерні консолі та інспектори, що дозволяють переглядати та змінювати структуру сторінок, відлагоджувати код, відстежувати помилки та аналізувати продуктивність.
                <br><br>
                Набір інструментів для розробки JavaScript постійно розширюється та вдосконалюється. Наприклад, пакетний менеджер npm дозволяє легко встановлювати та керувати залежностями проекту. Фреймворки та бібліотеки, такі як React, Vue.js та Angular, надають готові рішення для швидкого створення складних вебдодатків.
                <br><br>
                Загалом, середовище виконання js-коду та інструменти розробника відіграють критичну роль у продуктивності та якості розробки JavaScript-проектів. Вони допомагають розробникам ефективно працювати, забезпечуючи зручну робочу середу та набір потужних інструментів для розробки, тестування та впровадження вебдодатків.
            </p>
        `
    },
    {
        day: 4,
        level: 'elementary',
        title: 'Способи підключення скриптів',
        lecture: `
            <p loremdasff class="lecture__paragraph">
                Підключення скриптів є важливою частиною веброзробки, оскільки вони дозволяють додати функціональність та динаміку до вебсторінок. Існує кілька способів підключення скриптів до HTML-сторінок.
                <br><br>
                Перший спосіб - це використання елементу &ltscript> в HTML-коді. Можна підключити скрипт, вказавши шлях до файлу скрипта у властивості "src" елементу &ltscript>.
                <br><br>
                Наприклад:
            </p>
<pre class="code__exemple">
&ltscript src="script.js">&lt/script>
</pre>
            <p loremdasff class="lecture__paragraph">
                Цей підхід підключає зовнішній файл скрипта до вебсторінки і виконує його код.
                <br><br>
                Другий спосіб - це написання скрипта безпосередньо в HTML-коді, використовуючи вміст елементу &ltscript>. Можна написати JS-код безпосередньо в HTML-файлі між відкриваючим і закриваючим тегами &ltscript>.
                <br><br>
                Наприклад:
            </p>
<pre class="code__exemple">
&ltscript>
    // JS-код тут
&lt/script>
</pre>
            <p loremdasff class="lecture__paragraph">
                Цей підхід найчастіше використовується для невеликих фрагментів коду або для негайного виконання деяких функцій на сторінці.
                <br><br>
                Третій спосіб - використання атрибуту "onload" у вкладеному елементі &ltscript>. Можна використовувати цей атрибут для виконання функцій або ініціалізації коду після завантаження скрипта.
                <br><br>
                Наприклад:
            </p>
<pre class="code__exemple">
&ltscript src="script.js" onload="myFunction()">&lt/script>
</pre>
            <p loremdasff class="lecture__paragraph">
                У цьому прикладі, після завантаження скрипта "script.js", буде викликана функція "myFunction()".
                <br><br>
                Кожен з цих способів має свої переваги та використовується в залежності від потреб проекту. Правильний вибір способу підключення скриптів допоможе забезпечити ефективну та надійну роботу вебсторінок.
            </p>
        `
    },
    {
        day: 5,
        level: 'elementary',
        title: 'Змінні: призначення, типи, синтаксис, рекомендації щодо іменування змінних',
        lecture: `
            <p class="lecture__paragraph">
                Змінні - це основний елемент в будь-якій мові програмування, включаючи JavaScript. Вони використовуються для зберігання та маніпулювання даними під час виконання програми. Розглянемо основні аспекти змінних.
                <br><br>
                Призначення змінних полягає в тому, щоб зберігати дані, такі як числа, рядки, булеві значення тощо. В JavaScript можна оголошувати змінні, використовуючи ключове слово <span class="lecture-mark">var</span>, <span class="lecture-mark">let</span> або <span class="lecture-mark">const</span>. var було введено у більш старіших версіях JavaScript, зараз рекомендується використовувати <span class="lecture-mark">let</span> та <span class="lecture-mark">const</span>.
                <br><br>
                Синтаксис оголошення змінних виглядає так:
            </p>
<pre class="code__exemple">
let age = 18;
const name = "Anton";
var isStudent = true;
</pre>
            <p class="lecture__paragraph">
                Тут оголошуються змінні <span class="lecture-mark">age</span>, <span class="lecture-mark">name</span> та <span class="lecture-mark">isStudent</span> і присвоюються їм значення.
                <br><br>
                Існують різні типи змінних у JavaScript. Декілька типів включають числа, рядки, булеві значення, об'єкти, масиви та інші. JavaScript є динамічно типізованою мовою, тому тип змінної може змінюватись під час виконання програми.
                <br><br>
                При іменуванні змінних, краще використовувати зрозумілі та описові назви, які відображають значення, що зберігається. Рекомендується використовувати камелкейс (camelCase) для складних назв змінних. Наприклад, <span class="lecture-mark">firstName</span>, <span class="lecture-mark">numberOfStudents</span>, <span class="lecture-mark">isLoggedIn</span>.
                <br><br>
                Обов'язково уникати використання однобуквених або непояснюваних скорочень, оскільки це може ускладнити зрозуміння коду іншим розробникам.
                <br><br>
                Змінні в JavaScript важливі для зберігання та маніпулювання даними. Використовуючи правильні типи змінних та назви змінних, зробить код більш зрозумілим та підтримуваним.        
            </p>
        `
    },
    {
        day: 6,
        level: 'elementary',
        title: 'Типи даних',
        lecture: `
            <p class="lecture__paragraph">
                Типи даних є фундаментальною концепцією в програмуванні. Вони визначають, які види даних можна зберігати та як їх обробляти. У JavaScript існує кілька основних типів даних:
            </p>
            <ol>
                <li>Рядковий тип даних <span class="lecture-mark">String</span>: Використовується для зберігання текстової інформації. Рядки записуються у лапки, одинарні або подвійні. Наприклад: "Привіт, світ!".</li>
                <li>Числовий тип даних <span class="lecture-mark">Number</span>: Використовується для зберігання числових значень, як цілих, так і десяткових. Наприклад: 42, 3.14.</li>
                <li>Булевий тип даних <span class="lecture-mark">Boolean</span>: Представляє два можливі значення - true (істина) або false (хибний). Використовується для логічних операцій та умовних виразів.</li>
                <li>Об'єктний тип даних <span class="lecture-mark">Object</span>: Дозволяє зберігати складні структури даних, такі як об'єкти з властивостями та методами. Об'єкти в JavaScript є структурою з ключів та їх значень.</li>
                <li>Масиви <span class="lecture-mark">Array</span>: Використовуються для зберігання колекцій значень, до яких можна отримати доступ за допомогою індексів. Масиви в JavaScript завжди починаються з індексу 0.</li>
                <li><span class="lecture-mark">Null</span>: вказує на відсутність значення.</li>
                <li><span class="lecture-mark">Undefined</span>: вказує на не задане значення.</li>
            </ol>    
            <p class="lecture__paragraph">
                Знання різних типів даних дозволяє ефективно працювати з даними та виконувати різні операції. Важливо розуміти їх властивості, обмеження та способи використання для ефективного програмування.  
            </p>
        `
    },
    {
        day: 7,
        level: 'elementary',
        title: 'Перетворення типів даних',
        lecture: `
            <p class="lecture__paragraph">
                Перетворення типів даних є важливою концепцією в програмуванні, що дозволяє змінювати тип даних однієї змінної на інший. У JavaScript існує кілька способів перетворення типів даних, які варто знати.
                <br><br>
                Явне перетворення типів: Використовується функція <span class="lecture-mark">String()</span>, <span class="lecture-mark">Number()</span>, <span class="lecture-mark">Boolean()</span> для перетворення відповідно на рядковий, числовий або булевий тип даних. Наприклад:
            </p>
<pre class="code__exemple">
let age = 25;
let ageAsString = String(age); // "25" (рядкове значення)
</pre>
            <p class="lecture__paragraph">
                Автоматичне перетворення типів: JavaScript може автоматично перетворювати типи даних, коли оператор або функція вимагає певний тип даних. Наприклад:      
            </p>
<pre class="code__exemple">
let x = 10 + "5"; // "105" (рядкове перетворення)
let y = "10" - 5; // 5 (числове перетворення)
</pre>
            <p class="lecture__paragraph">
                Методи <span class="lecture-mark">parseInt()</span> та <span class="lecture-mark">parseFloat()</span>: Використовуються для перетворення рядкового значення на ціле або десяткове число відповідно. Наприклад:                
            </p>
<pre class="code__exemple">
let numString = "10"; 
let num = parseInt(numString); // 10 (числове значення)
</pre>
            <p class="lecture__paragraph">
                Метод <span class="lecture-mark">toString()</span>: Використовується для перетворення значення на рядковий тип даних. Наприклад:
            </p>
<pre class="code__exemple">
let num = 42;
let numAsString = num.toString(); // "42" (рядкове значення)
</pre>
            <p class="lecture__paragraph">
                Важливо мати на увазі, що під час перетворення типів даних можуть виникати непередбачувані результати, особливо у випадку некоректних або неочікуваних значень. Потрібно ретельно перевіряти та контролювати типи даних у своїх програмах, щоб уникнути помилок та непередбачуваної поведінки.                
            </p>
        `
    },
    {
        day: 8,
        level: 'elementary',
        title: 'Робота з рядками',
        lecture: `
            <p class="lecture__paragraph">
                Рядки є важливою складовою частиною багатьох програм, включаючи веброзробку. Робота з рядками дозволяє маніпулювати текстовою інформацією, виконувати операції з рядками та отримувати необхідні дані. Ось деякі аспекти роботи з рядками та приклади коду:
                <br><br>            
                Для оголошення рядків використовуються лапки (одинарні або подвійні):
            </p>
<pre class="code__exemple">
let message = "Привіт, світ!";
let name = 'Джон Доу';
</pre>
            <p class="lecture__paragraph">
                Можна отримати доступ до окремих символів у рядку за допомогою індексації:
            </p>
<pre class="code__exemple">
let str = "Привіт";
let firstChar = str[0]; // "П"
let lastChar = str[str.length - 1]; // "т"
</pre>
            <p class="lecture__paragraph">
                Можна об'єднувати рядки за допомогою оператора <span class="lecture-mark">+</span> або методу <span class="lecture-mark">concat()</span>:
            </p>
<pre class="code__exemple">
let greeting = "Привіт";
let name = "Джон";
let message = greeting + ", " + name; // "Привіт, Джон"
let fullMessage = greeting.concat(", ", name); // "Привіт, Джон"
</pre>
            <p class="lecture__paragraph">
                JavaScript надає багато методів для роботи з рядками. Ось декілька прикладів:
            </p>
<pre class="code__exemple">
let str = "Привіт, світ!";
let length = str.length; // Довжина рядка: 14
let uppercase = str.toUpperCase(); // "ПРИВІТ, СВІТ!"
let lowercase = str.toLowerCase(); // "привіт, світ!"
let substring = str.substring(0, 6); // "Привіт"
let replaced = str.replace("світ", "універсум"); // "Привіт, універсум!"
</pre>
            <p class="lecture__paragraph">
                Можна порівнювати рядки за допомогою операторів порівняння:
            </p>
<pre class="code__exemple">
let str1 = "Привіт";
let str2 = "привіт";
let isEqual = str1 === str2; // false
let isCaseInsensitiveEqual = str1.toLowerCase() === str2.toLowerCase(); // true
</pre>
            <p class="lecture__paragraph">
                JavaScript також підтримує інтерполяцію рядків, що дозволяє вставляти значення змінних без необхідності використовувати конкатенацію:
            </p>
<pre class="code__exemple">
let name = "Джон";
let age = 25;
let message = "Мене звати " + name + " і мені " + age + " років.";
</pre>
            <p class="lecture__paragraph">
                Робота з рядками в JavaScript надає багато можливостей для маніпулювання текстом. Завдяки різноманітним методам та операторам, можна легко виконувати операції з рядками, такі як отримання підстроки, заміна символів, конкатенація та багато іншого.
            </p>
        `
    },
    {
        day: 9,
        level: 'elementary',
        title: 'Робота з цифрами',
        lecture: `
            <p class="lecture__paragraph">
                Робота з числами є важливою складовою частиною багатьох програм, включаючи веброзробку. JavaScript, має різні можливості для роботи з числами та виконання різних математичних операцій. Ось деякі аспекти роботи з числами:
                <br><br>
                Можна оголосити числа, використовуючи просте присвоєння:
            </p>
<pre class="code__exemple">
let number = 10;
</pre>
            <p class="lecture__paragraph">
                JavaScript підтримує арифметичні операції над числами, такі як додавання, віднімання, множення та ділення:
            </p>
<pre class="code__exemple">
let sum = 5 + 3; // 8
let difference = 10 - 2; // 8
let product = 4 * 6; // 24
let quotient = 20 / 5; // 4
</pre>
            <p class="lecture__paragraph">
                Можна збільшувати або зменшувати значення числа на одиницю за допомогою операторів інкремента <span class="lecture-mark">++</span> та декремента <span class="lecture-mark">--</span>:
            </p>
<pre class="code__exemple">
let count = 0;
count++; // 1
count--; // 0
</pre>
            <p class="lecture__paragraph">
                JavaScript надає набір математичних функцій для виконання різних операцій, таких як округлення, вилучення кореня, обчислення потужностей тощо:
            </p>
<pre class="code__exemple">
let number = 5.8;
let rounded = Math.round(number); // 6
let squareRoot = Math.sqrt(number); // 2.41
let power = Math.pow(number, 2); // 33.64
</pre>
            <p class="lecture__paragraph">
                Можна перетворювати числа у рядки та навпаки, використовуючи функції <span class="lecture-mark">toString()</span> та <span class="lecture-mark">parseInt()</span> або <span class="lecture-mark">parseFloat()</span>:
            </p>
<pre class="code__exemple">
let number = 10;
let numberAsString = number.toString(); // "10"
let string = "5";
let stringAsNumber = parseInt(string); // 5
</pre>
            <p class="lecture__paragraph">
                JavaScript також має вбудовані математичні константи, такі як <span class="lecture-mark">Math.PI</span> (число Пі) та <span class="lecture-mark">ath.EM</span> (число Ейлера)
            </p>
<pre class="code__exemple">
let circleArea = Math.PI * Math.pow(radius, 2);
</pre>
            <p class="lecture__paragraph">
                Це лише деякі основні аспекти роботи з числами в JavaScript. Мова надає багато інших функцій та можливостей для роботи з числами, що дозволяють ефективно виконувати різноманітні операції та обчислення.
            </p>
        `
    },
    {
        day: 10,
        level: 'elementary',
        title: 'Коментарі',
        lecture: `
            <p class="lecture__paragraph">
                Коментарі в програмуванні є корисним інструментом, що дозволяє вставляти пояснення та пояснювальні записки в коді. Вони не впливають на виконання програми й використовуються виключно для зрозумілості для інших розробників або для самого себе.
                <br><br>
                У JavaScript є два основних типи коментарів: однорядкові та багаторядкові.
                <br><br>
                Однорядкові коментарі: Використовуються для вставлення коментарів у один рядок. Їх варто використовувати для коротких пояснень. Наприклад:
            </p>
<pre class="code__exemple">
// Це однорядковий коментар
let x = 5; // Присвоєння значення змінній x
</pre>
            <p class="lecture__paragraph">
                Багаторядкові коментарі: Використовуються для вставлення коментарів, які займають більше одного рядка. Вони корисні для більш детального пояснення або блокування частини коду. Наприклад:
            </p>
<pre class="code__exemple">
/* Це багаторядковий коментар,
   який може займати кілька рядків.
   Використовується для довших пояснень
   або для тимчасового вимкнення коду. */
   
let y = 10; // Присвоєння значення змінній y
</pre>
            <p class="lecture__paragraph">
                Потрібно користуватися коментарями, щоб пояснити складні або незрозумілі частини коду, надати контекст іншим розробникам або навіть самому собі у майбутньому. Однак, не потрібно зловживати коментарями - вони повинні бути зрозумілими, конкретними та необхідними для поліпшення читабельності вашого коду.
            </p>
        `
    },
    {
        day: 11,
        level: 'elementary',
        title: 'Синтаксис в JavaScript',
        lecture: `
            <p class="lecture__paragraph">
                Синтаксис в JavaScript визначає правила, які визначають, як потрібно структурувати та писати код у цій мові програмування. Знання правильного синтаксису важливе для написання функціонального та ефективного коду.
                <br><br>
                Основні правила синтаксису в JavaScript включають:
                <br><br>
                Закінчення рядка: Кожен оператор або вираз має завершуватися точкою з комою (;). Хоча це не є обов'язковим у всіх випадках, рекомендується дотримуватися цієї практики для забезпечення читабельності та уникнення потенційних помилок.
                <br><br>
                Змінні: Для створення змінних використовується ключове слово <span class="lecture-mark">let</span> або <span class="lecture-mark">const</span>, за яким слідує ім'я змінної. Наприклад: let x = 10. Для створення <span class="lecture-mark">var</span> змінної потрібно написати назву змінної без ключового слова var, таким чином прогарама зрозумує, що створилася змінна <span class="lecture-mark">var</span>. Наприклад: y = 5.
                <br><br>
                Функції: Функції оголошуються за допомогою ключового слова <span class="lecture-mark">function</span>, після якого йде ім'я функції та список параметрів у дужках. Наприклад:
            </p>
<pre class="code__exemple">
function greet(name) {
    console.log("Привіт, " + name + "!");
}  
</pre>
            <p class="lecture__paragraph">
                Умовні оператори: Умовні оператори, такі як <span class="lecture-mark">if</span>, <span class="lecture-mark">else if</span> і <span class="lecture-mark">else</span>, дозволяють виконувати певні дії залежно від заданих умов. Наприклад:
            </p>
<pre class="code__exemple">
var age = 18;

if (age >= 18) {
  console.log("Ви повнолітній.");
} else {
  console.log("Ви неповнолітній.");
}
</pre>
            <p class="lecture__paragraph">
                Цикли: Цикли, такі як <span class="lecture-mark">for</span> або <span class="lecture-mark">while</span>, дозволяють виконувати певний блок коду повторно. Наприклад:
            </p>
<pre class="code__exemple">
for (var i = 0; i < 5; i++) {
    console.log(i);
}  
</pre>
            <p class="lecture__paragraph">
                Це лише декілька основних правил синтаксису в JavaScript. Щоб написати функціональний код, важливо досліджувати й вивчати документацію та прийняті стандарти, такі як ECMAScript, що визначають офіційні правила синтаксису JavaScript. Знання синтаксису допоможе розробляти читабельний та ефективний код, який буде легко зрозуміти та підтримувати.
            </p>
        `
    },
    {
        day: 12,
        level: 'elementary',
        title: 'Оператори у JavaScript (арифметичні, порівняння, логічні)',
        lecture: `
            <p class="lecture__paragraph">
                Оператори в JavaScript виконують різні операції над змінними та значеннями. Вони дозволяють здійснювати арифметичні обчислення, порівнювати значення та здійснювати логічні операції. Основні групи операторів:
            </p>
            <ol>
                <li>Арифметичні оператори:
                    <ul>
                        <li>Додавання (+): <span class="lecture-mark">a + b</span></li>
                        <li>Віднімання (-): <span class="lecture-mark">a - b</span></li>
                        <li>Множення (*): <span class="lecture-mark">a * b</span></li>
                        <li>Ділення (/): <span class="lecture-mark">a / b</span></li>
                        <li>Ділення залишку (%): <span class="lecture-mark">a % b</span></li>
                        <li>Інкремент (++): <span class="lecture-mark">a++</span> або <span class="lecture-mark">++a</span></li>
                        <li>Декремент (--): <span class="lecture-mark">a--</span> або <span class="lecture-mark">--a</span></li>
                    </ul>
                </li>
                <li>Оператори порівняння:
                    <ul>
                        <li>Рівно (==): <span class="lecture-mark">a == b</span></li>
                        <li>Не рівно (!=): <span class="lecture-mark">a != b</span></li>
                        <li>Більше (>), менше (<): <span class="lecture-mark">a > b</span>, <span class="lecture-mark">a < b</span></li>
                        <li>Більше або рівне (>=), менше або рівне (<=): <span class="lecture-mark">a >= b</span>, <span class="lecture-mark">a <= b</span></li>
                    </ul>
                </li>
                <li>Логічні оператори:
                    <ul>
                        <li>І (&&): <span class="lecture-mark">a && b</span></li>
                        <li>Або (||): <span class="lecture-mark">a || b</span></li>
                        <li>Не (!): <span class="lecture-mark">!a</span></li>
                    </ul>
                </li>
            </ol>
            <p class="lecture__paragraph">
                Ці оператори дозволяють виконувати складніші обчислення та порівняння в JavaScript. Вони допомагають контролювати логіку програми та приймати рішення на основі умов.
                <br><br>
                Наприклад, можна використовувати арифметичні оператори для обчислення суми двох чисел, оператори порівняння для перевірки, чи одне число більше за інше, а логічні оператори для поєднання умов та прийняття рішень.
                <br><br>
                Знання та використання операторів у JavaScript дозволить ефективно працювати зі змінними та значеннями, здійснювати обчислення та приймати рішення в програмах.
            </p>
        `
    },
    {
        day: 13,
        level: 'base',
        title: 'Що таке методи',
        lecture: `
            <p class="lecture__paragraph">
                Методи в JavaScript - це функції, які пов'язані з об'єктами та виконують різні дії на цих об'єктах. Вони викликаються через ім'я об'єкта, за яким слідує крапка та ім'я методу. Методи дозволяють взаємодіяти з даними та здійснювати операції над ними.
                <br><br>
                Приклади кількох прикладів методів:
            </p>
            <ol>
                <li>Методи рядків (String):
                    <ul>
                        <li><span class="lecture-mark">toUpperCase()</span>: Перетворює рядок на верхній регістр.</li>
                        <li><span class="lecture-mark">toLowerCase()</span>: Перетворює рядок на нижній регістр.</li>
                        <li><span class="lecture-mark">length</span>: Повертає довжину рядка.</li>
                    </ul>
                </li>
                <li>Методи масивів (Array):
                    <ul>
                        <li><span class="lecture-mark">push()</span>: Додає елемент(-и) в кінець масиву.</li>
                        <li><span class="lecture-mark">pop()</span>: Видаляє останній елемент з масиву.</li>
                        <li><span class="lecture-mark">join()</span>: Об'єднує всі елементи масиву в один рядок.</li>
                    </ul>
                </li>
                <li>Методи об'єкта Math:
                    <ul>
                        <li><span class="lecture-mark">Math.round()</span>: Округлює число до найближчого цілого.</li>
                        <li><span class="lecture-mark">Math.sqrt()</span>: Обчислює квадратний корінь числа.</li>
                    </ul>
                </li>
                <li>Методи дати (Date):
                    <ul>
                        <li><span class="lecture-mark">getFullYear()</span>: Повертає рік.</li>
                        <li><span class="lecture-mark">getMonth()</span>: Повертає місяць (від 0 до 11).</li>
                    </ul>
                </li>
            </ol>
            <p class="lecture__paragraph">
                Кожен об'єкт має свої власні методи, які виконують специфічні операції. Методи допомагають спростити та зручно взаємодіяти з даними в JavaScript. Їх використання є важливою частиною програмування, оскільки вони дозволяють здійснювати різноманітні операції над об'єктами та даними.
            </p>
        `
    },
    {
        day: 14,
        level: 'base',
        title: 'Область видимості',
        lecture: `
            <p class="lecture__paragraph">
                Область видимості в JavaScript визначає доступність змінних, функцій та інших об'єктів у певному контексті програми. Приклади основних рівнів областей видимості:
            </p>
            <ol>
                <li>Глобальна область видимості: Змінні та функції, оголошені на глобальному рівні, доступні з будь-якого місця у програмі.</li>
                <li>Локальна область видимості: Змінні та функції, оголошені всередині функцій або блоків коду, мають область видимості, обмежену цими функціями або блоками коду. Вони недоступні ззовні.</li>
                <li>Блочна область видимості: Введена з введенням ES6 (ECMAScript 2015), дозволяє обмежити видимість змінних до блоку коду, включаючи цикли <span class="lecture-mark">for</span>, <span class="lecture-mark">if</span>, <span class="lecture-mark">while</span> та інші.</li>
            </ol>
            <p class="lecture__paragraph">
                Область видимості визначає, де можна отримати доступ до змінних та функцій і де вони будуть недоступні. Це сприяє управлінню змінними, уникненню конфліктів та поліпшенню безпеки програми. Важливо розуміти, як працює область видимості в JavaScript, щоб ефективно організувати код та уникати непередбачуваних помилок.
            </p>
        `
    },
    {
        day: 15,
        level: 'base',
        title: 'Масиви (методи масивів, перебирання масивів, властивість length)',
        lecture: `
            <p class="lecture__paragraph">
                Масиви є важливою частиною програмування в JavaScript, оскільки вони дозволяють зберігати та організовувати колекції даних.
                <br><br>
                Методи масивів:
                <br><br>
                <span class="lecture-mark">push()</span>: Додає один або кілька елементів в кінець масиву.
            </p>
<pre class="code__exemple">
const fruits = ['apple', 'banana'];
fruits.push('orange');
console.log(fruits); // ['apple', 'banana', 'orange']
</pre>
            <p class="lecture__paragraph">
                <span class="lecture-mark">pop()</span>: Видаляє останній елемент з масиву та повертає його значення.
            </p>
<pre class="code__exemple">
const fruits = ['apple', 'banana', 'orange'];
const removedFruit = fruits.pop();
console.log(removedFruit); // 'orange'
console.log(fruits); // ['apple', 'banana']
</pre>
            <p class="lecture__paragraph">
            <span class="lecture-mark">forEach()</span>: Виконує функцію з зазначеним кодом для кожного елемента масиву.
            </p>
<pre class="code__exemple">
const numbers = [1, 2, 3];
numbers.forEach((number) => {
    console.log(number * 2);
});
// Вивід: 2, 4, 6
</pre>
            <p class="lecture__paragraph">
                Перебирання масивів:
                <br><br>
                <span class="lecture-mark">for...of</span>: Дозволяє ітеруватись по елементах масиву.
            </p>
<pre class="code__exemple">
const fruits = ['apple', 'banana', 'orange'];
for (const fruit of fruits) {
    console.log(fruit);
}
// Вивід: 'apple', 'banana', 'orange'
</pre>
            <p class="lecture__paragraph">
                <span class="lecture-mark">map()</span>: Створює новий масив, застосовуючи функцію до кожного елемента оригінального масиву.
            </p>
<pre class="code__exemple">
const numbers = [1, 2, 3];
const doubledNumbers = numbers.map((number) => {
    return number * 2;
});
console.log(doubledNumbers); // [2, 4, 6]
</pre>
            <p class="lecture__paragraph">
                Властивість <span class="lecture-mark">length</span> масиву повертає його довжину, тобто кількість елементів.
            </p>
<pre class="code__exemple">
const fruits = ['apple', 'banana', 'orange'];
console.log(fruits.length); // 3
</pre>
            <p class="lecture__paragraph">
            Масиви в JavaScript надають широкі можливості для роботи з даними. Методи дозволяють змінювати, перетворювати та перебирати елементи масиву, а властивість length дозволяє отримати його розмір. Використовуючи ці можливості, можна ефективно маніпулювати масивами у своїх програмах на JavaScript.
            </p>
        `
    },
    {
        day: 16,
        level: 'base',
        title: 'Об’єкти (призначення, властивості та методи об’єкта, вкладені об’єкти, ключове слово delete, конструктори об’єктів, перебирання об’єктів, this в об’єкті, копіювання об’єктів)',
        lecture: `
            <p class="lecture__paragraph">
            Об'єкти є однією з основних структур даних в JavaScript, які дозволяють зберігати дані та функціональність в одному сутності. Аспекти роботи з об'єктами:
            <br><br>
            Об'єкти використовуються для збереження колекції властивостей та методів, які описують певний об'єкт або сутність. Властивості можуть бути різних типів даних, включаючи числа, рядки, булеві значення, масиви та навіть вкладені об'єкти.
            <br><br>
            Властивості об'єкта є значеннями, які зберігаються в об'єкті, а методи - функціями, пов'язаними з об'єктом. Для доступу до властивостей та виклику методів використовується синтаксис крапки (dot notation) або квадратних дужок (bracket notation).
            <br><br>
            Приклад:
            </p>
<pre class="code__exemple">
let car = {
    brand: "Toyota",
    model: "Camry",
    year: 2021,
    startEngine: function() {
        console.log("Engine started!");
    }
};
  
    console.log(car.brand); // Виводить "Toyota"
    car.startEngine(); // Викликає метод "startEngine" і виводить "Engine started!"
</pre>
            <p class="lecture__paragraph">
                У JavaScript можна створювати вкладені об'єкти, коли об'єкт містить інші об'єкти в якості своїх властивостей. Це дозволяє створювати структуровані дані та організовувати їх в логічні групи.
                <br><br>
                Приклад:
            </p>
<pre class="code__exemple">
let person = {
    name: "John",
    age: 30,
    address: {
        street: "Main Street",
        city: "New York"
    }
};
  
    console.log(person.address.city); // Виводить "New York"
</pre>
            <p class="lecture__paragraph">
                Ключове слово <span class="lecture-mark">delete</span> використовується для видалення властивостей об'єкта.
                <br><br>
                Приклад:
            </p>
<pre class="code__exemple">
let person = {
    name: "John",
    age: 30
};
  
    delete person.age;
    console.log(person.age); // Виводить undefined
</pre>
            <p class="lecture__paragraph">
                У JavaScript можна використовувати конструктори для створення нових об'єктів з однаковою структурою. Конструктор - це функція, яка використовується для ініціалізації нового об'єкта.
                <br><br>
                Приклад:            
            </p>
<pre class="code__exemple">
function Person(name, age) {
    this.name = name;
    this.age = age;
}
  
    let person1 = new Person("John", 30);
    let person2 = new Person("Jane", 25);
    
    console.log(person1.name); // Виводить "John"
    console.log(person2.age); // Виводить 25
</pre>
            <p class="lecture__paragraph">
                Для перебору властивостей об'єкта можна використовувати цикли або методи, такі як <span class="lecture-mark">Object.keys()</span> або цикл <span class="lecture-mark">for...in</span>.
                <br><br>
                Приклад:
            </p>
<pre class="code__exemple">
let car = {
    brand: "Toyota",
    model: "Camry",
    year: 2021
};

for (let key in car) {
    console.log(key + ": " + car[key]);
}
// Виводить:
// brand: Toyota
// model: Camry
// year: 2021
</pre>
            <p class="lecture__paragraph">
                Ключове слово <span class="lecture-mark">this</span> використовується для звернення до поточного об'єкта. Воно дозволяє отримувати доступ до його властивостей та методів всередині об'єкта.
                <br><br>
                Приклад:
            </p>
<pre class="code__exemple">
let person = {
    name: "John",
    age: 30,
    introduce: function() {
        console.log("My name is " + this.name + " and I am " + this.age + " years old.");
    }
};
  
person.introduce(); // Виводить "My name is John and I am 30 years old."
</pre>
            <p class="lecture__paragraph">
                Копіювання об'єктів може бути поверхневим (shallow copy) або глибоким (deep copy). При поверхневому копіюванні створюється новий об'єкт, який має посилання на ті ж самі властивості, що й оригінальний об'єкт. При глибокому копіюванні створюється новий об'єкт з копіями всіх властивостей та вкладених об'єктів.
                <br><br>
                Приклад поверхневого копіювання:
            </p>
<pre class="code__exemple">
let original = { name: "John" };
let copy = Object.assign({}, original);

copy.name = "Jane";
console.log(original.name); // Виводить "John"
console.log(copy.name); // Виводить "Jane"
</pre>
            <p class="lecture__paragraph">
                Приклад глибокого копіювання:
            </p>
<pre class="code__exemple">
let original = { name: "John", address: { city: "New York" } };
let copy = JSON.parse(JSON.stringify(original));

copy.address.city = "London";
console.log(original.address.city); // Виводить "New York"
console.log(copy.address.city); // Виводить "London"
</pre>
            <p class="lecture__paragraph">
            Це лише деякі аспекти роботи з об'єктами в JavaScript. Розуміння цих концепцій допоможе ефективно використовувати об'єкти для зберігання та обробки даних у коді.
            </p>
        `
    },
    {
        day: 17,
        level: 'base',
        title: 'Умовна конструкція (if та ?). Кон’юнкція, диз’юнкція, заперечення.',
        lecture: `
            <p class="lecture__paragraph">
                Умовна конструкція є важливою частиною програмування в JavaScript і дозволяє виконувати певний блок коду залежно від заданої умови. У JavaScript існують два основних способи виразити умови: за допомогою оператора <span class="lecture-mark">if</span> та тернарного оператора умовного оператора <span class="lecture-mark">?</span>.
                <br><br>
                Умовна конструкція з використанням оператора <span class="lecture-mark">if</span>:
            </p>
<pre class="code__exemple">
const age = 25;

if (age >= 18) {
    console.log("Ви повнолітній");
} else {
    console.log("Ви неповнолітній");
}
</pre>
            <p class="lecture__paragraph">
                У цьому прикладі, якщо вік дорівнює або більший за 18, виводиться повідомлення "Ви повнолітній", в іншому випадку виводиться повідомлення "Ви неповнолітній".
                <br><br>
                Умовна конструкція з використанням тернарного оператора умовного оператора <span class="lecture-mark">?</span>:
            </p>
<pre class="code__exemple">
const age = 25;

const message = age >= 18 ? "Ви повнолітній" : "Ви неповнолітній";
console.log(message);
</pre>
            <p class="lecture__paragraph">
            У цьому прикладі, якщо вік дорівнює або більший за 18, змінна <span class="lecture-mark">message</span> отримує значення "Ви повнолітній", в іншому випадку отримує значення "Ви неповнолітній".
            <br><br>
            Оператори кон'юнкції <span class="lecture-mark">&&</span>, диз'юнкції <span class="lecture-mark">||</span> та заперечення <span class="lecture-mark">!</span> також можуть використовуватись умовно для створення складніших логічних умов.
            <br><br>
            Оператор кон'юнкції <span class="lecture-mark">&&</span>:
            </p>
<pre class="code__exemple">
const age = 25;
const hasLicense = true;

if (age >= 18 && hasLicense) {
    console.log("Ви повнолітній і маєте водійське посвідчення");
}
</pre>
            <p class="lecture__paragraph">
                Цей приклад перевіряє, чи є вік 18 або більше, і чи є наявне водійське посвідчення. Якщо обидва умови виконуються, виводиться повідомлення "Ви повнолітній і маєте водійське посвідчення".
                <br><br>
                Оператор диз'юнкції <span class="lecture-mark">||</span>:
            </p>
<pre class="code__exemple">
const day = "субота";

if (day === "субота" || day === "неділя") {
    console.log("Сьогодні вихідний день!");
}
</pre>
            <p class="lecture__paragraph">
                У цьому прикладі перевіряється, чи є день рівним "субота" або "неділя". Якщо хоча б одна з умов виконується, виводиться повідомлення "Сьогодні вихідний день!".
                <br><br>
                Оператор заперечення <span class="lecture-mark">!</span>:
            </p>
<pre class="code__exemple">
const isLogged = false;

if (!isLogged) {
    console.log("Будь ласка, увійдіть в систему");
}
</pre>
            <p class="lecture__paragraph">
                У цьому прикладі перевіряється, чи змінна <span class="lecture-mark">isLogged</span> має значення <span class="lecture-mark">false</span>. Якщо це так, виводиться повідомлення "Будь ласка, увійдіть в систему".
                <br><br>
                З використанням цих операторів та умовних конструкцій можна керувати виконанням блоків коду на основі різних умов. Це дозволяє програмам виявляти та реагувати на різні сценарії виконання.
            </p>
        `
    },
    {
        day: 18,
        level: 'base',
        title: 'Конструкція Switch-case',
        lecture: `
            <p class="lecture__paragraph">
                Конструкція <span class="lecture-mark">switch-case</span> є потужним інструментом у JavaScript, який дозволяє виконувати різні дії залежно від значення змінної. Вона використовується для заміни послідовності <span class="lecture-mark">if-else</span> конструкцій у випадках, коли потрібно порівняти одне значення з декількома можливими варіантами.
                <br><br>
                Основний синтаксис <span class="lecture-mark">switch-case</span> виглядає так:
            </p>
<pre class="code__exemple">
switch (вираз) {
    case значення1:
        // код, який виконується, якщо вираз дорівнює значенню1
        break;
    case значення2:
        // код, який виконується, якщо вираз дорівнює значенню2
        break;
    case значення3:
        // код, який виконується, якщо вираз дорівнює значенню3
        break;
    default:
        // код, який виконується, якщо жоден з варіантів не відповідає значенню виразу
}
</pre>
            <p class="lecture__paragraph">
                Декілька прикладів використання конструкції <span class="lecture-mark">switch-case</span>:
                <br><br>
                Виведення дня тижня на основі числового значення:
            </p>
<pre class="code__exemple">
const day = 3;
let dayName;

switch (day) {
    case 1:
        dayName = "Понеділок";
        break;
    case 2:
        dayName = "Вівторок";
        break;
    case 3:
        dayName = "Середа";
        break;
    case 4:
        dayName = "Четвер";
        break;
    case 5:
        dayName = "П'ятниця";
        break;
    case 6:
        dayName = "Субота";
        break;
    case 7:
        dayName = "Неділя";
        break;
    default:
        dayName = "Недійсний день";
}

console.log("Сьогодні " + dayName);
</pre>
            <p class="lecture__paragraph">
                Виконання різних дій залежно від типу фрукту:
            </p>
<pre class="code__exemple">
const fruit = "апельсин";
let message;

switch (fruit) {
    case "яблуко":
        message = "Це яблуко, смачного!";
        break;
    case "банан":
        message = "Це банан, насолоджуйтесь!";
        break;
    case "апельсин":
        message = "Це апельсин, соковитий і вітамінний!";
        break;
    default:
        message = "Це не фрукт, перевірте правильність вводу.";
}

console.log(message);
</pre>
            <p class="lecture__paragraph">
                Конструкція <span class="lecture-mark">switch-case</span> дозволяє можливість зручно обробляти різні варіанти значень змінної та виконувати потрібні дії в залежності від цих значень.
            </p>
        `
    },
    {
        day: 19,
        level: 'base',
        title: 'Циклічні конструкції (for, for-in, for-of, while, do-while). Використання continue та break в тілі. Використання міток в циклах для continue та break',
        lecture: `
            <p class="lecture__paragraph">
                Циклічні конструкції є важливим інструментом у JavaScript, які дозволяють повторювати блоки коду декілька разів залежно від заданої умови. В JavaScript існує кілька типів циклів: <span class="lecture-mark">for</span>, <span class="lecture-mark">for-in</span>, <span class="lecture-mark">for-of</span>, <span class="lecture-mark">while</span> та <span class="lecture-mark">do-while</span>. Крім того, використання операторів <span class="lecture-mark">continue</span> та <span class="lecture-mark">break</span> дозволяє контролювати виконання циклів.
                <br><br>
                Цикл <span class="lecture-mark">for</span>:
            </p>
<pre class="code__exemple">
for (ініціалізація; умова; інкремент) {
    // код, що виконується
}  
</pre>
            <p class="lecture__paragraph">
                Приклад:
            </p>
<pre class="code__exemple">
for (let i = 0; i < 5; i++) {
    console.log(i);
}  
</pre>
            <p class="lecture__paragraph">
                В цьому прикладі цикл for виконується п'ять разів, виводячи значення змінної i від 0 до 4.
                <br><br>
                Цикл <span class="lecture-mark">for-in</span>:
            </p>
<pre class="code__exemple">
for (змінна in об'єкт) {
    // код, що виконується
}  
</pre>
            <p class="lecture__paragraph">
                Приклад:
            </p>
<pre class="code__exemple">
const person = {
    name: "John",
    age: 30,
    profession: "developer"
};
  
    for (let key in person) {
        console.log(key + ": " + person[key]);
}  
</pre>
            <p class="lecture__paragraph">
                Цей цикл перебирає всі властивості об'єкта <span class="lecture-mark">person</span> і виводить їх назви та значення.
                <br><br>
                Цикл <span class="lecture-mark">for-of</span>:
            </p>
<pre class="code__exemple">
for (змінна of масив) {
    // код, що виконується
}  
</pre>
            <p class="lecture__paragraph">
                Приклад:
            </p>
<pre class="code__exemple">
const numbers = [1, 2, 3, 4, 5];

for (let num of numbers) {
    console.log(num);
}
</pre>
            <p class="lecture__paragraph">
                Цей цикл перебирає всі елементи масиву <span class="lecture-mark">numbers</span> і виводить їх значення.
                <br><br>
                Цикл <span class="lecture-mark">while</span>:
            </p>
<pre class="code__exemple">
while (умова) {
    // код, що виконується
}  
</pre>
            <p class="lecture__paragraph">
                Приклад:
            </p>
<pre class="code__exemple">
let i = 0;

while (i < 5) {
    console.log(i);
    i++;
}
</pre>
            <p class="lecture__paragraph">
                У цьому прикладі цикл <span class="lecture-mark">while</span> виконується, поки значення змінної i менше 5.
                <br><br>
                Цикл <span class="lecture-mark">do-while</span>:
            </p>
<pre class="code__exemple">
do {
    // код, що виконується
} while (умова);  
</pre>
            <p class="lecture__paragraph">
                Приклад:
            </p>
<pre class="code__exemple">
let i = 0;

do {
    console.log(i);
    i++;
} while (i < 5);
</pre>
            <p class="lecture__paragraph">
                У цьому прикладі цикл <span class="lecture-mark">do-while</span> виконується, принаймні один раз, і потім продовжує виконуватись, поки значення змінної i менше 5.
                <br><br>
                Оператори <span class="lecture-mark">continue</span> та <span class="lecture-mark">break</span> використовуються для керування виконанням циклів:
                <br><br>
                Оператор <span class="lecture-mark">continue</span> переходить до наступної ітерації циклу.
                <br>
                Оператор <span class="lecture-mark">break</span> припиняє виконання циклу і переходить до наступного блоку коду після циклу.
                <br><br>
                Мітки можуть використовуватись для контролю виконання циклів за допомогою операторів continue та <span class="lecture-mark">break</span>. Для використання міток використовується синтаксис:
            </p>
<pre class="code__exemple">
назва_мітки: for (інструкція) {
    // код, що виконується
}  
</pre>
            <p class="lecture__paragraph">
                Приклад використання міток та операторів <span class="lecture-mark">continue</span> та <span class="lecture-mark">break</span>:
            </p>
<pre class="code__exemple">
outerLoop: for (let i = 0; i < 3; i++) {
    for (let j = 0; j < 3; j++) {
        if (i === 1 && j === 1) {
            continue outerLoop;
        }
        console.log("i = " +i +", "+ "j = " + j);
        if (i === 2 && j === 0) {
            break outerLoop;
        }
    }
}  
</pre>
            <p class="lecture__paragraph">
                У цьому прикладі, за допомогою мітки <span class="lecture-mark">outerLoop</span> та оператора <span class="lecture-mark">continue</span>, ми переходимо до наступної ітерації зовнішнього циклу, якщо виконується умова. Крім того, за допомогою мітки та оператора <span class="lecture-mark">break</span>, ми припиняємо виконання зовнішнього циклу.
                <br><br>
                Циклічні конструкції у JavaScript дозволяють повторювати блоки коду, контролювати їх виконання та використовувати оператори <span class="lecture-mark">continue</span> та <span class="lecture-mark">break</span> для керування циклами. Вони є потужним інструментом для ефективного управління логікою програми.
            </p>
        `
    },
    {
        day: 20,
        level: 'base',
        title: 'Функції (оголошення та виклик функцій, рекомендації до назв функцій, параметри функцій, типи функцій, область видимості функцій)',
        lecture: `
            <p class="lecture__paragraph">
                Функції є важливим елементом в розробці програм на JavaScript. Вони дозволяють групувати блоки коду, надавати їм імена і використовувати їх у різних частинах програми. Приклади основих аспекти функцій:
                <br><br>
                Оголошення та виклик функцій:
            </p>
<pre class="code__exemple">
function назва_функції(параметри) {
    // код, що виконується
}

назва_функції(аргументи);  
</pre>
            <p class="lecture__paragraph">
                Приклад:       
            </p>
<pre class="code__exemple">
function sayHello() {
    console.log("Привіт!");
}

sayHello();  
</pre>
            <p class="lecture__paragraph">
                У цьому прикладі оголошується функція <span class="lecture-mark">sayHello()</span>, яка просто виводить повідомлення "Привіт!" в консоль, і викликається за допомогою <span class="lecture-mark">sayHello()</span>.
                <br><br>
                Рекомендації до назв функцій:
                <br><br>
                Назви функцій мають бути описовими та відображати їхню функціональність.
                <br>
                Використовуйте вербальну форму для назв функцій, яка відповідає дії, яку вони виконують. Наприклад: <span class="lecture-mark">calculateSum()</span>, <span class="lecture-mark">displayMessage()</span>.
                <br>
                Використовуйте камелкейс для складних назв функцій, де кожне наступне слово починається з великої літери. Наприклад: <span class="lecture-mark">calculateTotalPrice()</span>, <span class="lecture-mark">getUserDetails()</span>.
                <br><br>
                Функції можуть мати параметри, які використовуються для передачі значень у функцію.           
            </p>
<pre class="code__exemple">
function назва_функції(параметр1, параметр2) {
    // код, що виконується
}
  
назва_функції(аргумент1, аргумент2);  
</pre>
            <p class="lecture__paragraph">
                Приклад:          
            </p>
<pre class="code__exemple">
function greet(name) {
    console.log("Привіт, " + name);
}
  
greet("Марія");  
</pre>
            <p class="lecture__paragraph">
                У цьому прикладі функція <span class="lecture-mark">greet()</span> має один параметр <span class="lecture-mark">name</span>, який використовується для виведення персоналізованого привітання.
                <br><br>
                Функції без поверненого значення:       
            </p>
<pre class="code__exemple">
function назва_функції() {
    // код, що виконується
}  
</pre>
            <p class="lecture__paragraph">
                Функції з поверненим значенням:       
            </p>
<pre class="code__exemple">
function назва_функції() {
    // код, що виконується
    return значення;
}  
</pre>
            <p class="lecture__paragraph">
            Змінні, оголошені всередині функцій, є локальними для цих функцій і недоступні за їх межами. Вони мають область видимості, обмежену самою функцією.
            <br><br>
            Приклад:      
            </p>
<pre class="code__exemple">
function calculateSum(a, b) {
    let result = a + b;
    return result;
}
  
let x = 5;
let y = 3;
let sum = calculateSum(x, y);
console.log(sum); // Виведе: 8
console.log(result); // Помилка: result is not defined
</pre>
            <p class="lecture__paragraph">
                У цьому прикладі змінна <span class="lecture-mark">result</span> є локальною для функції <span class="lecture-mark">calculateSum()</span> і недоступна за її межами.
                <br><br>
                Функції в JavaScript дозволяють організовувати і структурувати код, роблять його більш зрозумілим та повторно використовуваним. Вони грають важливу роль у розробці програм і дозволяють створювати складні інтерактивні застосунки.        
            </p>
        `
    },
    {
        day: 21,
        level: 'base',
        title: 'Що таке DOM',
        lecture: `
            <p class="lecture__paragraph">
                DOM (Document Object Model) - це структура, яка представляє сторінку HTML або XML документа як дерево об'єктів. DOM надає програмістам зручний і доступний інтерфейс для взаємодії зі структурою документа, зміни його вмісту, стилю та поведінки.
                <br><br>
                Основні поняття, пов'язані з DOM:
            </p>
            <ol>
                <li>Елементи є основною одиницею в DOM. Вони представляють HTML теги, такі як <span class="lecture-mark">&ltdiv></span>, <span class="lecture-mark">&ltp></span>, <span class="lecture-mark">&lta></span>, і т.д. Кожен елемент може мати дочірні елементи, атрибути і текстовий вміст.</li>
                <li>Вузли описують частини документа в DOM. Вони можуть бути елементами, текстовими вузлами, коментарями, атрибутами і т.д.</li>
                <li>DOM представляє документ як дерево, де кожен вузол є дочірнім елементом із батьківськими та сусідніми вузлами.</li>
                <li>За допомогою DOM, ви можете змінювати вміст елементів, стилізувати їх, додавати атрибути, видаляти та пересувати їх.</li>
                <li>Є можливість отримувати доступ до елементів за допомогою ідентифікаторів, класів, тегів або інших властивостей.</li>
                <li>DOM дозволяє встановлювати обробники подій на елементах, таким чином реагуючи на користувацькі взаємодії, такі як натискання кнопок, наведення курсора і т.д.</li>
            </ol>
            <p class="lecture__paragraph">
                Приклад роботи з DOM:
            </p>
<pre class="code__exemple">
// Отримання елемента за його ідентифікатором
let element = document.getElementById("myElement");

// Зміна текстового вмісту елемента
element.textContent = "Привіт, світ!";

// Додавання класу до елемента
element.classList.add("highlight");

// Додавання нового елемента
let newElement = document.createElement("div");
newElement.textContent = "Новий елемент";
document.body.appendChild(newElement);

// Встановлення обробника події
element.addEventListener("click", function() {
    alert("Ви натиснули на елемент!");
});
</pre>
            <p class="lecture__paragraph">
                DOM дозволяє розробникам маніпулювати сторінкою, створювати динамічні ефекти, змінювати вміст динамічно відповідно до користувацьких дій. Він є важливою частиною розробки вебдодатків та взаємодії зі сторінкою вебсайту.
            </p>
        `
    },
    {
        day: 22,
        level: 'advanced',
        title: 'Робота з DOM елементами',
        lecture: `
            <p class="lecture__paragraph">
                Робота з DOM елементами дозволяє маніпулювати вмістом, стилями та поведінкою елементів на вебсторінці. Це дає нам можливість динамічно змінювати структуру та вигляд сторінки з використанням JavaScript.
                <br><br>
                Отримання елемента за його ідентифікатором:
            </p>
<pre class="code__exemple">
let element = document.getElementById("myElement");
</pre>
            <p class="lecture__paragraph">
                Зміна текстового вмісту елемента:
            </p>
<pre class="code__exemple">
element.textContent = "Новий текст";
</pre>
            <p class="lecture__paragraph">
                Додавання класу до елемента:
            </p>
<pre class="code__exemple">
element.classList.add("highlight");
</pre>
            <p class="lecture__paragraph">
                Зміна атрибутів елемента:
            </p>
<pre class="code__exemple">
element.setAttribute("src", "image.jpg");
</pre>
            <p class="lecture__paragraph">
                Додавання нового елемента:
            </p>
<pre class="code__exemple">
let newElement = document.createElement("div");
newElement.textContent = "Новий елемент";
document.body.appendChild(newElement);
</pre>
            <p class="lecture__paragraph">
                Видалення елемента:
            </p>
<pre class="code__exemple">
element.remove();
</pre>
            <p class="lecture__paragraph">
                Додавання обробника подій до елемента:
            </p>
<pre class="code__exemple">
element.addEventListener("click", function() {
  alert("Ви натиснули на елемент!");
});
</pre>
            <p class="lecture__paragraph">
                Зміна стилів елемента:
            </p>
<pre class="code__exemple">
element.style.color = "red";
element.style.fontSize = "20px";
</pre>
            <p class="lecture__paragraph">
                Зміна класів елемента:
            </p>
<pre class="code__exemple">
element.classList.add("highlight");
element.classList.remove("highlight");
</pre>
            <p class="lecture__paragraph">
                Ці приклади демонструють лише декілька основних операцій з DOM елементами. Завдяки цим методам та багатьом іншим, можна змінювати структуру, стилі та вміст сторінки за допомогою JavaScript. Використовуючи ці можливості, можна створювати динамічні та інтерактивні вебдодатки.
            </p>
        `
    },
    {
        day: 23,
        level: 'advanced',
        title: 'Дата і час (об’єкти дати, setTimeout(), setInterval())',
        lecture: `
            <p class="lecture__paragraph">
                Робота з датою і часом в JavaScript включає в себе використання об'єктів дати, функцій <span class="lecture-mark">setTimeout()</span> та <span class="lecture-mark">setInterval()</span>. Приклади кожного з цих аспектів докладніше:
                <br><br>
                В JavaScript є вбудований об'єкт <span class="lecture-mark">Date</span>, який дозволяє працювати з датою і часом. Цей об'єкт надає різноманітні методи для отримання і встановлення різних компонентів дати, таких як рік, місяць, день, година, хвилина, секунда і т.д. Можна створити об'єкт дати за допомогою ключового слова <span class="lecture-mark">new</span> та конструктора <span class="lecture-mark">Date()</span>.
                <br><br>
                Наприклад:
            </p>
<pre class="code__exemple">
const currentDate = new Date();
console.log(currentDate); // Виведе поточну дату і час
</pre>
            <p class="lecture__paragraph">
                Об'єкти дати дозволяють виконувати різноманітні операції над датами, такі як порівняння, форматування, отримання окремих компонентів і т.д.
                <br><br>
                <span class="lecture-mark">setTimeout()</span> та <span class="lecture-mark">setInterval()</span>: Ці дві функції дозволяють виконувати код асинхронно з певним затримкою або через регулярні інтервали.
                <br>
                <span class="lecture-mark">setTimeout()</span> виконує задану функцію один раз після вказаної затримки. Приймає два параметри: функцію, яку треба виконати, і затримку в мілісекундах.
                <br><br>
                Наприклад:
            </p>
<pre class="code__exemple">
setTimeout(function() {
    console.log('Цей код виконається через 2 секунди');
}, 2000);  
</pre>
            <p class="lecture__paragraph">
                <span class="lecture-mark">setInterval()</span> виконує задану функцію регулярно з вказаним інтервалом. Приймає два параметри: функцію, яку треба виконати, і інтервал в мілісекундах між виконаннями.
                <br><br>
                Наприклад:
            </p>
<pre class="code__exemple">
setInterval(function() {
    console.log('Цей код буде виконуватись кожну секунду');
}, 1000);  
</pre>
            <p class="lecture__paragraph">
                Обидві функції <span class="lecture-mark">setTimeout()</span> та <span class="lecture-mark">setInterval()</span> повертають ідентифікатор таймера, який можна використовувати для скасування виконання коду за допомогою функції <span class="lecture-mark">clearTimeout()</span> або <span class="lecture-mark">clearInterval()</span>.
                <br><br>
                Таким чином, робота з датою і часом в JavaScript дозволяє вам працювати з датою, встановлювати затримки виконання коду і виконувати функції з регулярними інтервалами. Це важливі аспекти розробки, які дозволяють створювати динамічні та зручні застосунки.
            </p>
        `
    },
    {
        day: 24,
        level: 'advanced',
        title: 'Події (робота з подіями, події миші, події клавіатури, робота з формами)',
        lecture: `
            <p class="lecture__paragraph">
            Події в JavaScript дозволяють реагувати на дії користувача, такі як кліки мишею, натискання клавіш, введення тексту в форми і багато іншого. Приклади роботи з подіями:
            <br><br>
            Робота з подіями: Для роботи з подіями використовується метод <span class="lecture-mark">addEventListener()</span>, який дозволяє встановити обробник подій для елемента. Цей метод приймає два параметри: назву події та функцію-обробник, яка буде виконуватись при виникненні події.
            <br><br>
            Наприклад:            
            </p>
<pre class="code__exemple">
const button = document.querySelector('#myButton');

button.addEventListener('click', function() {
    console.log('Кнопка була натиснута');
});
</pre>
            <p class="lecture__paragraph">
            JavaScript надає можливість реагувати на різні події миші, такі як клік, подвійний клік, наведення курсору на елемент, відведення курсору від елемента і т.д. Деякі з найпоширеніших подій миші включають <span class="lecture-mark">click</span>, <span class="lecture-mark">mouseover</span>, <span class="lecture-mark">mouseout</span>, <span class="lecture-mark">mousedown</span>, <span class="lecture-mark">mouseup</span> і т.д.
            </p>
<pre class="code__exemple">
const element = document.querySelector('.myElement');

element.addEventListener('click', function() {
    console.log('Елемент був клікнутий');
});
</pre>
            <p class="lecture__paragraph">
                Також можна реагувати на події, пов'язані з натисканням клавіш на клавіатурі. Наприклад, події <span class="lecture-mark">keydown</span> та <span class="lecture-mark">keyup</span> спрацьовують, коли користувач натискає або відпускає клавішу. Ви можете отримати код клавіші, яку натиснули, за допомогою властивості <span class="lecture-mark">keyCode</span> або <span class="lecture-mark">key</span> у події.
            </p>
<pre class="code__exemple">
document.addEventListener('keydown', function(event) {
    console.log('Клавіша ' + event.key + ' була натиснута');
});
</pre>
            <p class="lecture__paragraph">
                Події також широко використовуються для роботи з формами. Наприклад, ви можете встановити обробник події <span class="lecture-mark">submit</span>, який виконується при відправці форми. Ви можете отримати доступ до значень полів форми та здійснити необхідні дії.
            </p>
<pre class="code__exemple">
const form = document.querySelector('#myForm');

form.addEventListener('submit', function(event) {
    event.preventDefault(); // Зупиняємо стандартну поведінку форми

    // Отримуємо значення полів форми
    const name = document.querySelector('#name').value;
    const email = document.querySelector('#email').value;

    // Виконуємо необхідні дії з отриманими значеннями
    console.log('Ім'я: ' + name);
    console.log('Email: ' + email);
});
</pre>
            <p class="lecture__paragraph">
                Таким чином, використання подій у JavaScript дозволяє створювати взаємодію з користувачем, реагувати на дії миші та клавіатури, а також працювати з формами для отримання та обробки даних. Це розширює можливості вебдодатків і дозволяє створювати більш інтерактивний і зручний досвід для користувачів.
            </p>
        `
    },
    {
        day: 25,
        level: 'advanced',
        title: 'BOM',
        lecture: `
            <p class="lecture__paragraph">
                BOM (Browser Object Model) є частиною JavaScript, яка надає доступ до браузерного середовища та його функціональності. Воно дозволяє взаємодіяти з вікном браузера, сторінкою та іншими компонентами браузера. Ось кілька ключових аспектів роботи з BOM:
            </p>
            <ol>
                <li>Об'єкт window: Об'єкт window є головним об'єктом BOM та представляє поточне вікно браузера. Він надає доступ до властивостей та методів, таких як <span class="lecture-mark">location</span> (доступ до URL), <span class="lecture-mark">document</span> (доступ до DOM), <span class="lecture-mark">alert()</span> (виведення повідомлення), <span class="lecture-mark">setTimeout()</span> (виконання функції з затримкою) та багато інших.</li>
                <li>Обробка подій: BOM дозволяє реагувати на події, що відбуваються в браузері, такі як клік мишею, натискання клавіші, завантаження сторінки тощо. Ви можете використовувати методи, такі як <span class="lecture-mark">addEventListener()</span>, для додавання обробників подій та виконання певних дій у відповідь на них.</li>
                <li>Робота з cookies: BOM дозволяє зчитувати та записувати cookies, що зберігаються на браузері користувача. Ви можете використовувати властивість <span class="lecture-mark">document.cookie</span> для роботи з цими значеннями.</li>
                <li>Робота з історією браузера: BOM надає доступ до історії перегляду користувача за допомогою методів <span class="lecture-mark">history.back()</span> (повернення до попередньої сторінки), <span class="lecture-mark">history.forward()</span> (перехід до наступної сторінки) та <span class="lecture-mark">history.pushState()</span> (додавання запису в історію браузера без перезавантаження сторінки).</li>
                <li>Робота з вікнами та фреймами: BOM дозволяє маніпулювати вікнами та фреймами браузера, відкривати нові вікна, контролювати їх розміри та положення, а також виконувати інші дії з ними.</li>
            </ol>
            <p class="lecture__paragraph">
                Ось приклади коду, які демонструють деякі функціональні можливості BOM:
            </p>
<pre class="code__exemple">
// Отримання URL поточної сторінки
let currentURL = window.location.href;

// Відкриття нового вікна
window.open('https://www.example.com', '_blank');

// Додавання обробника події на клік кнопки
let button = document.getElementById('myButton');
button.addEventListener('click', function() {
    // Виконання дій у відповідь на клік
    alert('Кнопка була натиснута!');
});

// Запис значення у cookie
document.cookie = 'username=John Doe';

// Повернення до попередньої сторінки
history.back();
</pre>
            <p class="lecture__paragraph">
                Це лише кілька основних аспектів роботи з BOM. Використовуючи BOM, можна взаємодіяти з браузерним середовищем та реалізовувати різноманітні функціональні можливості у своїх вебдодатках.
            </p>
        `
    },
    {
        day: 26,
        level: 'advanced',
        title: 'Асинхронна функція',
        lecture: `
            <p class="lecture__paragraph">
                Асинхронні функції є потужним інструментом в сучасному JavaScript, який дозволяє виконувати операції, що займають багато часу, без блокування виконання коду. Вони дозволяють використовувати асинхронне програмування та зручно працювати з асинхронними операціями, такими як мережеві запити, зчитування файлів та інші.
                <br><br>
                Основні риси асинхронних функцій:
            </p>
            <ol>
                <li>Асинхронну функцію можна оголосити за допомогою ключового слова <span class="lecture-mark">async</span> перед визначенням функції. Наприклад: <span class="lecture-mark">async function myFunction() { }</span>.</li>
                <li>Ключове слово <span class="lecture-mark">await</span> використовується всередині асинхронних функцій для очікування завершення асинхронних операцій. Воно призупиняє виконання функції до отримання результату асинхронної операції. Наприклад: <span class="lecture-mark">let result = await someAsyncOperation()</span>.</li>
                <li>Асинхронна функція завжди повертає проміс. Це дозволяє іншим функціям чекати на результат виконання асинхронної функції або ланцюгувати додаткові асинхронні операції.</li>
                <li>Для обробки помилок в асинхронних функціях можна використовувати конструкцію <span class="lecture-mark">try...catch</span>. Помилки, що виникають під час виконання асинхронних операцій, можна ловити та обробляти за допомогою <span class="lecture-mark">catch</span>.</li>
            </ol>
            <p class="lecture__paragraph">
                Ось приклад асинхронної функції, яка виконується асинхронну операцію зчитування файлу:
            </p>
<pre class="code__exemple">
async function readFile() {
    try {
        let fileContent = await fetch('example.txt');
        console.log(fileContent);
    } catch (error) {
        console.error('Помилка зчитування файлу:', error);
    }
}
 
readFile(); 
</pre>
            <p class="lecture__paragraph">
                У цьому прикладі асинхронна функція <span class="lecture-mark">readFile</span> використовує ключове слово <span class="lecture-mark">await</span> для очікування результату виконання функції <span class="lecture-mark">fetch</span>, яка здійснює запит на зчитування файлу. Якщо операція успішна, результат зберігається у змінній <span class="lecture-mark">fileContent</span>. У разі виникнення помилки, вона ловиться за допомогою <span class="lecture-mark">catch</span> і виводиться повідомлення про помилку.
                <br><br>
                Асинхронні функції дозволяють ефективно працювати з асинхронними задачами та поліпшують реалізацію вебдодатків, забезпечуючи зручний синтаксис та обробку помилок. Вони є потужним інструментом в розробці програмного забезпечення, що вимагає асинхронності.
            </p>
            `
    },
    {
        day: 27,
        level: 'advanced',
        title: 'Про бібліотеки та фреймворки',
        lecture: `
            <p class="lecture__paragraph">
                Бібліотеки та фреймворки є невід'ємною частиною сучасної веброзробки. Вони надають готові рішення, інструменти та структуру для розробки вебдодатків більш ефективно та швидко. Отже, що таке бібліотеки та фреймворки і їх відмінності.
            </p>
            <ol>
                <li>Бібліотеки:
                    <ul>
                        <li>Бібліотеки - це набір функцій, методів та утиліт, які допомагають виконувати певні завдання у веброзробці.</li>
                        <li>Вони надають конкретні функції, які можна використовувати за необхідністю.</li>
                        <li>Розробники можуть вибирати, які бібліотеки вони хочуть використовувати у своїх проектах.</li>
                        <li>Приклади популярних бібліотек: jQuery, React, Lodash.</li>
                    </ul>
                </li>
                <li>Фреймворки:
                    <ul>
                        <li>Фреймворки - це комплексні набори інструментів, бібліотек та правил, які надають структуру та архітектуру для розробки вебдодатків.</li>
                        <li>Вони визначають спосіб організації коду та взаємодію різних компонентів додатку.</li>
                        <li>Фреймворки надають шаблони та загальні рішення для побудови додатків.</li>
                        <li>Розробники повинні використовувати структуру та конвенції, визначені фреймворком.</li>
                        <li>Приклади популярних фреймворків: Angular, Vue.js, Laravel (для PHP), Django (для Python).</li>
                    </ul>
                </li>
            </ol>
            <p class="lecture__paragraph">
                Бібліотеки та фреймворки значно спрощують розробку вебдодатків, забезпечуючи готові рішення, оптимізацію роботи та забезпечуючи широкий спектр можливостей. Вони дозволяють розробникам економити час та зусилля, прискорюючи розробку та поліпшуючи якість коду. Вибір бібліотеки або фреймворку залежить від потреб проекту та вподобань у розробці.
            </p>
        `
    },
    {
        day: 28,
        level: 'advanced',
        title: 'localStorage та sessionStorage',
        lecture: `
            <p class="lecture__paragraph">
            <span class="lecture-mark">localStorage</span> та <span class="lecture-mark">sessionStorage</span> - це два об'єкти, які надають зручний спосіб зберігання даних в браузері. Вони дозволяють зберігати дані на стороні клієнта, що дозволяє зберегти стан додатка між перезавантаженнями сторінок або закриттям браузера.
            </p>
            <ol>
                <li><span class="lecture-mark">localStorage</span>:
                    <ul>
                        <li><span class="lecture-mark">localStorage</span> зберігає дані безстроково, аж до їх явного видалення. Це означає, що дані, збережені в <span class="lecture-mark">localStorage</span>, будуть доступні навіть після закриття браузера та перезавантаження сторінки.</li>
                        <li>Дані в <span class="lecture-mark">localStorage</span> зберігаються у вигляді пар ключ-значення. Ключ і значення повинні бути рядками</li>
                        <li>Доступ до <span class="lecture-mark">localStorage</span> здійснюється за допомогою об'єкта <span class="lecture-mark">localStorage</span>. Наприклад, для збереження даних можна використовувати метод <span class="lecture-mark">localStorage.setItem(key, value)</span>, а для отримання даних - метод <span class="lecture-mark">localStorage.getItem(key)</span>.</li>
                    </ul>
                </li>
                <li><span class="lecture-mark">sessionStorage</span>:
                    <ul>
                        <li><span class="lecture-mark">sessionStorage</span> зберігає дані протягом одного сеансу роботи з браузером. Як тільки сеанс закривається або сторінка перезавантажується, дані в <span class="lecture-mark">sessionStorage</span> втрачаються.</li>
                        <li>Як і в <span class="lecture-mark">localStorage</span>, дані в <span class="lecture-mark">sessionStorage</span> зберігаються у вигляді пар ключ-значення. Доступ до даних також здійснюється через об'єкт <span class="lecture-mark">sessionStorage</span>, використовуючи методи <span class="lecture-mark">sessionStorage.setItem(key, value)</span> та <span class="lecture-mark">sessionStorage.getItem(key)</span>.</li>
                    </ul>
                </li>
            </ol>
            <p class="lecture__paragraph">
                Нижче наведені приклади коду, які демонструють роботу з <span class="lecture-mark">localStorage</span> та <span class="lecture-mark">sessionStorage</span>:
            </p>
<pre class="code__exemple">
// Збереження та отримання даних в localStorage
localStorage.setItem('username', 'John');
const username = localStorage.getItem('username');

// Збереження та отримання даних в sessionStorage
sessionStorage.setItem('token', 'abc123');
const token = sessionStorage.getItem('token');
</pre>
            <p class="lecture__paragraph">
            <span class="lecture-mark">localStorage</span> та <span class="lecture-mark">sessionStorage</span> є потужними інструментами для зберігання та отримання даних на стороні клієнта. Вони дозволяють зберегти стан додатка та зручно працювати зі збереженими даними, що сприяє поліпшенню користувацького досвіду та можливості зберегти дані між сеансами роботи з браузером.
            </p>
        `
    },
    {
        day: 29,
        level: 'advanced',
        title: 'Робота з формами',
        lecture: `
            <p class="lecture__paragraph">
                Робота з формами є важливою складовою розробки вебдодатків, оскільки вона дозволяє взаємодіяти з користувачем, отримувати та обробляти введені дані. Вебформи забезпечують можливість вводу тексту, вибору пунктів, відправки даних на сервер та багато іншого. Основні елементи форм включають текстові поля, кнопки, вибіркові списки, перемикачі та багато іншого.
                <br><br>
                Для роботи з формами використовуються наступні концепції та методи:
            </p>
            <ol>
                <li>HTML надає різноманітні елементи форм, такі як <span class="lecture-mark">&ltinput></span>, <span, class="lecture-mark">>&ltselect></span, <span class="lecture-mark">&lttextarea></span> та інші. Кожен елемент має свою специфіку та використовується для збору певних типів даних.</li>
                <li>За допомогою JavaScript можна отримати значення полів форми. Наприклад, <span class="lecture-mark">document.getElementById('myInput').value</span> поверне значення текстового поля з ідентифікатором <span class="lecture-mark">myInput</span>.</li>
                <li>Форми реагують на події, такі як натискання кнопки або введення тексту. За допомогою обробників подій, таких як <span class="lecture-mark">addEventListener</span>, можна призначити функції, які виконуються під час виникнення певних подій у формі.</li>
                <li>Форми можуть перевіряти та валідувати дані, які вводяться користувачем. Це забезпечує контроль над правильністю введених даних перед їх відправкою на сервер.</li>
                <li>Після заповнення форми користувач може надіслати її дані на сервер для подальшої обробки. Це здійснюється за допомогою кнопки "Submit" або вручну з використанням JavaScript.</li>
            </ol>
            <p class="lecture__paragraph">
                Ось приклад коду, який демонструє основні аспекти роботи з формами:
            </p>
<pre class="code__exemple">
&ltform id="myForm">
    &ltlabel for="name">Ім'я:</label>
    &ltinput type="text" id="name" required>

    &ltlabel for="email">Email:</label>
    &ltinput type="email" id="email" required>

    &ltinput type="submit" value="Відправити">
&lt/form>

&ltscript>
    // Отримання форми за ідентифікатором
    const form = document.getElementById('myForm');

    // Додавання обробника події при надісланні форми
    form.addEventListener('submit', function(event) {
        event.preventDefault(); // Зупинка стандартної відправки форми

        // Отримання значень полів форми
        const name = document.getElementById('name').value;
        const email = document.getElementById('email').value;

        // Виконання дій з отриманими даними
        console.log('Ім'я:', name);
        console.log('Email:', email);

        // Додаткові дії (наприклад, відправка даних на сервер)
    });
&lt/script>
</pre>
            <p class="lecture__paragraph">
                У цьому прикладі створюється проста форма з полями для введення імені та електронної пошти. При натисканні кнопки "Відправити" викликається обробник події, який перехоплює дані з полів форми та виконує певні дії, наприклад, виводить їх в консоль.
                <br><br>
                Робота з формами в JavaScript дозволяє створювати взаємодіючі вебдодатки, збирати та обробляти введені дані, а також забезпечує контроль над процесом заповнення форм користувачем.
            </p>
        `
    },
    {
        day: 30,
        level: 'advanced',
        title: "Робота зі стандартними об'єктами (Math, Array, String, Date і т.д.)",
        lecture: `
            <p class="lecture__paragraph">
                Робота зі стандартними об'єктами в JavaScript відкриває безліч можливостей для обробки даних та виконання різноманітних операцій. У JavaScript є кілька вбудованих об'єктів, таких як <span class="lecture-mark">Math</span>, <span class="lecture-mark">Array</span>, <span class="lecture-mark">String</span>, <span class="lecture-mark">Date</span> та багато інших, які надають набір методів і властивостей для роботи зі своїми конкретними типами даних.
            </p>
            <ol>
                <li>Об'єкт <span class="lecture-mark">Math</span> містить математичні функції та константи для виконання різних операцій. Наприклад, методи <span class="lecture-mark">Math.abs()</span>, <span class="lecture-mark">Math.sqrt()</span>, <span class="lecture-mark">Math.random()</span> дозволяють виконувати операції над числами, обчислювати корені, генерувати випадкові числа тощо.</li>
                <li>Об'єкт <span class="lecture-mark">Array</span> використовується для роботи з масивами даних. Він має набір методів, таких як <span class="lecture-mark">push()</span>, <span class="lecture-mark">pop()</span>, <span class="lecture-mark">shift()</span>, <span class="lecture-mark">unshift()</span> для додавання та видалення елементів масиву, методи <span class="lecture-mark">map()</span>, <span class="lecture-mark">filter()</span>, <span class="lecture-mark">e()</span>reduc для перебору та обробки елементів масиву, а також властивість <span class="lecture-mark">length</span>, яка показує кількість елементів у масиві.</li>
                <li>Об'єкт <span class="lecture-mark">String</span> надає методи для роботи з рядками. Наприклад, методи <span class="lecture-mark">length</span>, <span class="lecture-mark">charAt()</span>, <span class="lecture-mark">slice()</span> дозволяють отримувати довжину рядка, отримувати окремі символи або підрядки, методи <span class="lecture-mark">toUpperCase()</span>, <span class="lecture-mark">toLowerCase()</span> змінюють регістр символів та багато інших.</li>
                <li>Об'єкт <span class="lecture-mark">Date</span> дозволяє працювати з датою та часом. Він має методи для отримання поточної дати та часу, встановлення значень дати, отримання окремих компонентів дати, обчислення різниці між датами та інші операції.</li>
                <li>Крім згаданих, JavaScript має багато інших стандартних об'єктів, таких як <span class="lecture-mark">RegExp</span> для роботи з регулярними виразами, JSON для роботи з форматом обміну даними JSON, <span class="lecture-mark">Map</span> та <span class="lecture-mark">Set</span> для роботи зі зберіганням ключ-значення та множинами.</li>
            </ol>
            <p class="lecture__paragraph">
                Нижче наведені приклади коду, які ілюструють деякі операції зі стандартними об'єктами:
            </p>
<pre class="code__exemple">
// Робота з об'єктом Math
const randomNumber = Math.random(); // Генерація випадкового числа від 0 до 1
const squareRoot = Math.sqrt(25); // Обчислення кореня числа

// Робота з об'єктом Array
const fruits = ['apple', 'banana', 'orange'];
fruits.push('pear'); // Додавання елементу в кінець масиву
fruits.pop(); // Видалення останнього елементу масиву
const filteredFruits = fruits.filter(fruit => fruit.length > 5); // Фільтрація елементів масиву

// Робота з об'єктом String
const message = 'Hello, World!';
const messageLength = message.length; // Отримання довжини рядка
const firstCharacter = message.charAt(0); // Отримання першого символу рядка

// Робота з об'єктом Date
const currentDate = new Date();
const currentYear = currentDate.getFullYear(); // Отримання поточного року
const formattedDate = currentDate.toLocaleDateString(); // Отримання дати в форматі dd.mm.yyyy
</pre>
            <p class="lecture__paragraph">
                Стандартні об'єкти в JavaScript дозволяють зручно та ефективно працювати з різними типами даних та виконувати різноманітні операції. Вони є потужним інструментом для розробки вебдодатків та дозволяють ефективно маніпулювати даними у коді.
            </p>
        `
    }
];